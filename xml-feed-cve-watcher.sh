#!/bin/bash

FEED_CHECK_INTERVAL=$(grep -w FEED_CHECK_INTERVAL config.conf | sed 's/FEED_CHECK_INTERVAL=//g' | awk '{print $1}')
SENDERADDR=$(grep -w SENDERADDR config.conf | sed 's/SENDERADDR=//g' | awk '{print $1}')
MAISERVER=$(grep -w MAISERVER config.conf | sed 's/MAISERVER=//g' | awk '{print $1}')
RECIPIENTADDR=$(grep -w RECIPIENTADDR config.conf | sed 's/RECIPIENTADDR=//g' | awk '{print $1}')


SHA1OLD=0 # Set first time run state
while true; do
    wget -q "https://fortiguard.com/rss/ir.xml" -O wget-xml-tmp
    cat wget-xml-tmp | xmllint --format - | tail -n +7 >wget-xml
    sleep 2                                                         # Wait for download to complete (increase sleep if error is "wget Trash. Waiting for next check")
    if [[ $(find wget-xml -type f -size +100c 2>/dev/null) ]]; then # Check if wget was successful
        SHA1NEW=$(sha1sum wget-xml | awk '{print $1}')              # Set with sha1sum the current hash value
        if [ "$1" = "-t" ]; then                                    # Check for test state
            SHA1OLD=TEST                                            # Set different value to trigger an update
        else                                                        # Not in test mode
            printf ""                                               # Not in test mode
        fi
        if [ "$SHA1NEW" = "$SHA1OLD" ]; then                                                                                        # Compare if the hashes have changed (Check if a new CVE exists)
            SHA1OLD=$SHA1NEW                                                                                                        # Set new SHA1 sum as old SHA1 sum
            rm wget-xml*                                                                                                            # Remove all existing feeds in directory
            sleep $FEED_CHECK_INTERVAL                                                                                              # Wait time between rechecks
        else                                                                                                                        # Different hash value (New CVE found)
            if [ "$SHA1OLD" -eq 0 ]; then                                                                                           # Check for first time run
                echo "$(date) # [i]: Everyone has their first time (First launch)"                                                  # First time run hmmm ?
                SHA1OLD=$SHA1NEW                                                                                                    # Remove first time run state
            else                                                                                                                    # Not first run
                echo "$(date) # [i]: New Entry (Hash changed)"                                                                      # OMG not another one ;)
                SHA1OLD=$SHA1NEW                                                                                                    # Set new SHA1 sum as old SHA1 sum
                cat wget-xml | head -n 6 | tail -n 5 >formated                                                                      # Format feed & Use only most recent entry (top entry)
                TITLE=$(grep -o '<title>.*</title>' formated | sed 's/<title>//g' | sed 's/<\/title>//g')                           # Get title
                URL=$(grep -o '<link>.*</link>' formated | sed 's/<link>//g' | sed 's/<\/link>//g')                                 # Get URL
                SUMMARY=$(grep -o '<description>.*</description>' formated | sed 's/<description>//g' | sed 's/<\/description>//g') # Get SUMMARY
                PUBLISHDATE=$(grep -o '<pubDate>.*</pubDate>' formated | sed 's/<pubDate>//g' | sed 's/<\/pubDate>//g')             # Get PUBLISHDATE
                GUID=$(grep -o '<guid>.*</guid>' formated | sed 's/<guid>//g' | sed 's/<\/guid>//g')                                # Get CVEID
                # Remove not needed file
                EXIST=$(grep $GUID CVEs-list.txt)
                if [ -z "$EXIST" ]; then
                    echo "$GUID,\"$TITLE\", \"$PUBLISHDATE\", \"$SUMMARY\", \"$URL\"" >>CVEs-list.txt # Sent new CVE to CVE-list.txt
                    echo "##### $GUID #####" >mail-msg
                    echo "TITLE: $TITLE" >>mail-msg
                    echo "" >>mail-msg
                    echo "PUBLISH DATE: $PUBLISHDATE" >>mail-msg
                    echo "" >>mail-msg
                    echo "$URL" >>mail-msg
                    echo "$(cat mail-msg | mailx -s "$GUID - $TITLE" -r $SENDERADDR -S smtp="$MAISERVER" $RECIPIENTADDR)"
                    echo "$(date) # [i]: Notification sent!"
                else
                    echo "$(date) # [i]: $CVEID already in list"
                fi
            fi
        fi
    else
        echo "$(date) # [error]: wget Trash. Waiting for next check" # Wget was trash (No downlaoded feed in time. Update "Wait for download to complete")
        sleep 30
    fi
done
